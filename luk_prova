#Adicionar arquivo JS no HTML:

<script src="arquivo.js"></script>

#Subtraindo datas em JS:
// Solicitar a data do usuário via prompt
const dataUsuario = prompt("Digite uma data (YYYY-MM-DD):");

// Converter a entrada para um objeto Date
const dataReferencia = new Date(dataUsuario);

// Obter a data atual
const dataAtual = new Date();

// Calcular a diferença em milissegundos
const diferenca = dataAtual - dataReferencia;

// Converter para dias (1000 ms/s * 60 s/min * 60 min/h * 24 h/dia)
const diferencaDias = diferenca / (1000 * 60 * 60 * 24);

console.log(`A diferença entre a data inserida e a data atual é de ${diferencaDias.toFixed(0)} dias.`);
//toFixed limita o número de casas decimais

#Alterando cor de fundo com condição:

const body = document.querySelector('body');

condição x {
  mensagem = “bom dia”;
  body.style.backgroundColor = "beige";
}

document.write(mensagem);
//ou
section.innerHTML = mensagem;
section.innerHTML+=`<br>mensagem: ${mensagem}`;

// no HTML, tem que ter a tag section (pq aí esse JS joga lá)

#Chamando Função JS ao clicar em botão no HTML:

HTML:
<input type="button" onclick=funcao() value="Exibir um alerta">
    <button onclick=funcao2()>cliqe aqui</button>
JS:
function funcao(){
            alert("alerta");
        }
function funcao2(){
            var x;
            var r =confirm("Escolha um valor!");
            if(r){
                x = "OK"
            }
            else{
                x = "Cancelar";
            }
            document.write("Você pressionou "+x);
}


#Importantes feitos em aula:

var largura = window.innerWidth; 
var linguagem = navigator.language;
var plataforma = navigator.platform;
var largura = window.innerWidth;
document.getElementById('resultado').innerHTML = "Largura da tela = " + largura + "px";
// joga esse texto lá no elemento que HTML que tem o id = resultado 


function pegar_geolocalizacao() {
            navigator.geolocation.getCurrentPosition(function(position) {
                var geolocalizacao = "Latitude: " + position.coords.latitude + ", Longitude: " + position.coords.longitude;
                document.getElementById('resultado').innerHTML = "Geolocalização da Página = " + geolocalizacao;
            });
        }
        
        
        
//maris

Manipulação do DOM
Selecionar Elementos:

document.getElementById(id) 
- Seleciona um elemento pelo seu id.

document.getElementsByClassName(class) 
- Seleciona todos os elementos de uma classe específica.

document.getElementsByTagName(tag) 
- Seleciona todos os elementos de uma tag específica.

document.querySelector(selector) 
- Seleciona o primeiro elemento que corresponde a um seletor CSS.

document.querySelectorAll(selector) 
- Seleciona todos os elementos que correspondem a um seletor CSS.


Manipular o Conteúdo de Elementos:

element.innerHTML - Obtém ou define o conteúdo HTML de um elemento.
element.textContent - Obtém ou define o conteúdo de texto de um elemento.
element.setAttribute(name, value) - Define o valor de um atributo.
element.getAttribute(name) - Obtém o valor de um atributo.


Criar e Remover Elementos:

document.createElement(tagName) 
- Cria um novo elemento do tipo especificado.

parent.appendChild(child) 
- Adiciona um elemento filho ao final de um elemento pai.

parent.insertBefore(newElement, referenceElement) 
- Insere um novo elemento antes de um elemento de referência.

element.remove() - Remove o elemento do DOM.

element.replaceChild(newChild, oldChild) 
- Substitui um filho por outro.


Classes e Atributos:

element.classList.add(className) 
- Adiciona uma classe a um elemento.

element.classList.remove(className) 
- Remove uma classe de um elemento.

element.classList.toggle(className) 
- Adiciona ou remove uma classe, dependendo de sua existência.

element.classList.contains(className) 
- Verifica se o elemento tem uma determinada classe.


Manipulação de Estilos
Estilos Inline:

element.style.property = value 
- Define o estilo de um elemento diretamente.

Exemplo: element.style.backgroundColor = 'red'


Obter Estilos Computados:

window.getComputedStyle(element) 
- Obtém todos os estilos calculados aplicados a um elemento.


Manipulação de CSS:

element.className 
- Define ou obtém o valor do atributo class de um elemento.

element.style.cssText 
- Define o estilo completo de um elemento por meio de uma string.


Manipulação de Eventos
Adicionar Eventos:

element.addEventListener('event', callback) 
- Adiciona um listener para um evento. Exemplo:





button.addEventListener('click', function() {
  console.log('Botão clicado');
});


Remover Eventos:

element.removeEventListener('event', callback) - Remove um listener de evento associado anteriormente.
Eventos Comuns:



click - Disparado quando o usuário clica em um elemento.

mouseover - Disparado quando o ponteiro do mouse passa sobre um elemento.

mouseout - Disparado quando o ponteiro do mouse sai de um elemento.

keydown - Disparado quando uma tecla é pressionada.

keyup - Disparado quando uma tecla é solta.

submit - Disparado quando um formulário é enviado.


Manipulação de Eventos com event:

event.preventDefault() 
- Impede o comportamento padrão do evento, como o envio de um formulário.

event.stopPropagation() 
- Impede que o evento se propague para outros elementos (event bubbling).

event.target 
- Refere-se ao elemento que acionou o evento.


Exemplo Completo:

// Selecionar um elemento
const button = document.getElementById('myButton');

// Alterar o texto de um elemento
button.textContent = "Clique aqui";

// Adicionar um evento de clique
button.addEventListener('click', function() {
    button.style.backgroundColor = 'blue'; // Alterar o estilo ao clicar
    alert("Botão foi clicado!");
});

//forEach 
let text = "";
const fruits = ["apple", "orange", "cherry"];
fruits.forEach(myFunction);

document.getElementById("demo").innerHTML = text;
 
function myFunction(item, index) {
  text += index + ": " + item + "<br>"; 
}
